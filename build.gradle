// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
        
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${versions.agp}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"

        classpath "com.github.ben-manes:gradle-versions-plugin:${versions.versions}"

    }
}

apply plugin: "com.github.ben-manes.versions"

allprojects {
    repositories {
        google()
        mavenCentral()

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects {
    afterEvaluate {
        if (project.plugins.hasPlugin('com.android.library')) {
            android {
                compileSdkVersion versions.compile_sdk

                defaultConfig {
                    minSdkVersion versions.min_sdk
                    targetSdkVersion versions.target_sdk
                    versionCode versions.version_code
                    versionName versions.version_name
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    vectorDrawables.useSupportLibrary true
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                kotlinOptions {
                    jvmTarget = JavaVersion.VERSION_1_8.toString()
                }
            }
        }
        if (project.plugins.hasPlugin("kotlin-kapt")) {
            kapt {
                javacOptions {
                    option("-Xmaxerrs", 500)
                }
                useBuildCache = true
            }
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        !it.currentVersion.contains(".") ||
                (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion))
    }
}
